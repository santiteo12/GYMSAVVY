name: Deploy and Run by Tags
env:
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_VERSION: ${{ github.sha }}
on:
  push:
    tags: ['v*.*.*']

permissions:
  id-token: write
  contents: read

jobs:
    security:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@master
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/python@master
          continue-on-error: true 
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: --sarif-file-output=snyk.sarif
        - name: Upload result to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk.sarif
    build:
      needs: security
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2
        # usamos el action para obtener el tag que se ha creado en el push https://github.com/marketplace/actions/get-tag?version=v1.1.0
      - name: 'Get tag'
        id: tag
        uses: dawidd6/action-get-tag@v1.1.0
        
      - name: 'Login via Docker'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.ACR_NAME }}/${{env.REPO_NAME}}:${{ steps.tag.outputs.tag }}
          docker push ${{ secrets.ACR_NAME }}/${{env.REPO_NAME}}:${{ steps.tag.outputs.tag }}
    deploy:
      needs: build
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Get tag'
        id: tag
        uses: dawidd6/action-get-tag@v1.1.0
      - name: 'deploy Container Instance'
        uses: azure/aci-deploy@v1
        with:
          location: eastus
          name: flask-estructura
          resource-group: umGroupResource
          image: ${{ secrets.ACR_NAME }}/${{env.REPO_NAME}}:${{ steps.tag.outputs.tag }}
          dns-name-label: flask-estructura-${{ github.run_id }}-${{ github.run_attempt }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 5000
          cpu: 1
          memory: 1
      
      - name: 'logout'
        run: |
          az logout  
